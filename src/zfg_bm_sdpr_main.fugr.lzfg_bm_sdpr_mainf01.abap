*----------------------------------------------------------------------*
***INCLUDE LZFG_BM_SDPR_MAINF01.
*----------------------------------------------------------------------*

FORM GENERATE_PROMONUMBER.
  IF ZVI_BM_SDPR_H-PRMNR IS INITIAL.
    CALL FUNCTION 'NUMBER_GET_NEXT'
      EXPORTING
        NR_RANGE_NR             = '01'
        OBJECT                  = 'ZNR_SDPR'
      IMPORTING
        NUMBER                  = ZVI_BM_SDPR_H-PRMNR
      EXCEPTIONS
        INTERVAL_NOT_FOUND      = 1
        NUMBER_RANGE_NOT_INTERN = 2
        OBJECT_NOT_FOUND        = 3
        QUANTITY_IS_0           = 4
        QUANTITY_IS_NOT_1       = 5
        INTERVAL_OVERFLOW       = 6
        BUFFER_OVERFLOW         = 7
        OTHERS                  = 8.
  ENDIF.

ENDFORM.

FORM SAVE_LOG.
  DATA:
    LS_EXTRACT LIKE ZVI_BM_SDPR_H_EXTRACT,
    LS_SDPRH_N TYPE ZVI_BM_SDPR_H,
    LS_SDPRH_O TYPE ZVI_BM_SDPR_H,

    LT_TOTAL   LIKE ZVI_BM_SDPR_H_EXTRACT[].

  LT_TOTAL[] = TOTAL[].
  LOOP AT EXTRACT.
    CLEAR: LS_SDPRH_N.
    LS_EXTRACT = EXTRACT.
    IF LS_EXTRACT-ACTION = 'I'
    OR LS_EXTRACT-ACTION = 'N'.
      LS_EXTRACT-CRDAT = SY-DATUM.
      LS_EXTRACT-CRUSR = SY-UNAME.
*      MOVE-CORRESPONDING LS_EXTRACT TO LS_SDPRH_N.
*      "Change log
*      CALL FUNCTION 'ZFM_SD_ZSDPR_CHG_LOG'
*        EXPORTING
*          IS_SDPRH_N  = LS_SDPRH_N
*          IS_SDPRH_O  = LS_SDPRH_O
*          I_SDPRH_UPD = 'I'
**         IS_SDPRC_N  =
**         IS_SDPRC_O  =
**         I_SDPRC_UPD =
**         IS_SDPRD_N  =
**         IS_SDPRD_O  =
**         I_SDPRD_UPD =
*        .

    ELSEIF LS_EXTRACT-ACTION = 'U'.
      LS_EXTRACT-CHDAT = SY-DATUM.
      LS_EXTRACT-CHUSR = SY-UNAME.
    ENDIF.
    EXTRACT = LS_EXTRACT.
    MODIFY LT_TOTAL FROM LS_EXTRACT
      TRANSPORTING CRDAT CRUSR CHDAT CHUSR
      WHERE PRMNR = LS_EXTRACT-PRMNR.
    MODIFY EXTRACT.
  ENDLOOP.
  TOTAL[] = LT_TOTAL[].
ENDFORM.

*PROCESS ON VALUE-REQUEST.
*  FIELD ZVI_BM_SDPR_D-PSTYV MODULE 0104_SH_PSTYV.
*&---------------------------------------------------------------------*
*&      Module  0104_SH_PSTYV  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE 0104_SH_PSTYV INPUT.
  PERFORM 0104_SH_PSTYV.

ENDMODULE.

FORM 0104_SH_PSTYV.
  DATA:
    LS_SHLPPARAM TYPE  SHLPFIELD,
    LT_PSTYV     TYPE TABLE OF ZST_PSTYV,
    LS_PSTYV     TYPE ZST_PSTYV,
    LT_FIELD_TAB TYPE TABLE OF DFIES,
    LS_FIELD     TYPE DFIES,
    LW_FIELD     TYPE CHAR30,
    LW_INDEX     TYPE CHAR2,
    LR_MTPOS     TYPE RANGE OF T184-MTPOS,
    LS_MTPOS     LIKE LINE OF LR_MTPOS,
    LT_DYNPFIELD TYPE TABLE OF DYNPREAD,
    LS_DYNPFIELD TYPE DYNPREAD.
  FIELD-SYMBOLS:
    <LF_PSTYV>   TYPE ZST_PSTYV-PSTYV.

  GET CURSOR LINE LS_DYNPFIELD-STEPL.
  LS_DYNPFIELD-FIELDNAME = 'ZVI_BM_SDPR_D-MATNR'.
  APPEND LS_DYNPFIELD TO LT_DYNPFIELD.

  CALL FUNCTION 'DYNP_VALUES_READ'
    EXPORTING
      DYNAME     = SY-REPID
      DYNUMB     = SY-DYNNR
    TABLES
      DYNPFIELDS = LT_DYNPFIELD
    EXCEPTIONS
      OTHERS     = 8.
  READ TABLE LT_DYNPFIELD INDEX 1 INTO LS_DYNPFIELD.
  ZVI_BM_SDPR_D-MATNR = LS_DYNPFIELD-FIELDVALUE.

*  READ TABLE EXTRACT INDEX LS_DYNPFIELD-STEPL.
*  CHECK SY-SUBRC IS INITIAL.
*  ZVI_BM_SDPR_D = EXTRACT(149).

  IF ZVI_BM_SDPR_D-MATNR IS NOT INITIAL.
    SELECT SINGLE *
      FROM MARA
      INTO @DATA(LS_MARA)
     WHERE MATNR = @ZVI_BM_SDPR_D-MATNR.
    LS_MTPOS-SIGN     = 'I'.
    LS_MTPOS-OPTION   = 'EQ'.
    LS_MTPOS-LOW      = LS_MARA-MTPOS_MARA.
    APPEND LS_MTPOS TO LR_MTPOS.
  ENDIF.
  SELECT T184~AUART, TVAKT~BEZEI AS AUARTT, T184~PSTYV, PSTY1, PSTY2, PSTY3,
         PSTY4, PSTY5, PSTY6, PSTY7, PSTY8, PSTY9, PSTY10, PSTY11
    INTO @DATA(LS_T184)
    FROM T184 LEFT OUTER JOIN TVAKT
      ON T184~AUART = TVAKT~AUART AND TVAKT~SPRAS = @SY-LANGU
   WHERE T184~AUART = @ZVI_BM_SDPR_D-AUART
     AND T184~PSTYV LIKE 'Z%'
     AND MTPOS      IN @LR_MTPOS.

    CLEAR: LS_PSTYV.
    MOVE-CORRESPONDING LS_T184 TO LS_PSTYV.
    SELECT SINGLE VTEXT
      FROM TVAPT
      INTO LS_PSTYV-VTEXT
     WHERE PSTYV = LS_PSTYV-PSTYV
       AND TVAPT~SPRAS = SY-LANGU.
    APPEND LS_PSTYV TO LT_PSTYV.

    DO 11 TIMES.
      CLEAR: LS_PSTYV.
      LW_INDEX = SY-INDEX.
      CONDENSE LW_INDEX.
      MOVE-CORRESPONDING LS_T184 TO LS_PSTYV.
      LW_FIELD = 'PSTY' && LW_INDEX.
      ASSIGN COMPONENT LW_FIELD OF STRUCTURE LS_T184 TO <LF_PSTYV>.
      IF SY-SUBRC IS INITIAL
      AND <LF_PSTYV> IS NOT INITIAL.
        LS_PSTYV-PSTYV = <LF_PSTYV>.
        SELECT SINGLE VTEXT
          FROM TVAPT
          INTO LS_PSTYV-VTEXT
         WHERE  PSTYV = LS_PSTYV-PSTYV
           AND TVAPT~SPRAS = SY-LANGU.
        APPEND LS_PSTYV TO LT_PSTYV.
      ENDIF.
    ENDDO.
  ENDSELECT.
  CHECK SY-SUBRC IS INITIAL.

  SORT LT_PSTYV BY PSTYV.
  DELETE ADJACENT DUPLICATES FROM LT_PSTYV COMPARING PSTYV.

  CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
    EXPORTING
      DDIC_STRUCTURE  = 'ZST_PSTYV'
      RETFIELD        = 'PSTYV'
      VALUE_ORG       = 'S'
      DYNPPROG        = SY-REPID
      DYNPNR          = SY-DYNNR
      DYNPROFIELD     = 'ZVI_BM_SDPR_D-PSTYV'
    TABLES
      VALUE_TAB       = LT_PSTYV
    EXCEPTIONS
      PARAMETER_ERROR = 1
      NO_VALUES_FOUND = 2
      OTHERS          = 3.
ENDFORM.
*PROCESS ON VALUE-REQUEST.
*  FIELD: ZVI_BM_SDPR_C-RLOW ,
*         ZVI_BM_SDPR_C-RHIGH
*&---------------------------------------------------------------------*
*&      Module  CONDITION_LOW_SHLP  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE 0102_CONDITION_VALUE_SHLP INPUT.
  PERFORM 0102_CONDITION_VALUE_SHLP.
ENDMODULE.

*      MODULE 0102_CONDITION_VALUE_SET_DESC.
*&---------------------------------------------------------------------*
*&      Module  0102_CONDITION_VALUE_SET_DESC  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE 0102_CONDITION_VALUE_SET_DESC INPUT.
  PERFORM 0102_CONDITION_VALUE_SET_DESC.

ENDMODULE.

*&---------------------------------------------------------------------*
*& Form 0102_CONDITION_VALUE_SET_DESC
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
FORM 0102_CONDITION_VALUE_SET_DESC .
  DATA:
    LS_DIM         TYPE ZTB_BM_SDPR_DIM,
    LW_WHERE_LANGU TYPE STRING,
    LW_WHERE       TYPE STRING,
    LS_DYNPFIELDS  TYPE DYNPREAD,
    LT_DYNPFIELDS  TYPE TABLE OF DYNPREAD.

  CLEAR: ZVI_BM_SDPR_C-LDESC, ZVI_BM_SDPR_C-HDESC.
  SELECT SINGLE *
    FROM ZTB_BM_SDPR_DIM
    INTO LS_DIM
   WHERE TABNAME = ZVI_BM_SDPR_C-RTABLE
     AND FIELDNAME = ZVI_BM_SDPR_C-RFIELD.
  CHECK SY-SUBRC IS INITIAL
    AND LS_DIM-CHECKTABLE IS NOT INITIAL
    AND LS_DIM-CHECKFIELD IS NOT INITIAL
    AND LS_DIM-DESCF IS NOT INITIAL.

  LW_WHERE = LS_DIM-CHECKFIELD && ' = ''' && ZVI_BM_SDPR_C-RLOW && ''''.
  IF LS_DIM-LANGF IS NOT INITIAL.
    CONCATENATE LW_WHERE ' AND ' LS_DIM-LANGF ' = ''' SY-LANGU ''''
           INTO LW_WHERE RESPECTING BLANKS.
  ENDIF.
  SELECT SINGLE (LS_DIM-DESCF)
    FROM (LS_DIM-CHECKTABLE)
    INTO ZVI_BM_SDPR_C-LDESC
   WHERE (LW_WHERE).

  LW_WHERE = LS_DIM-CHECKFIELD && ' = ''' && ZVI_BM_SDPR_C-RHIGH && ''''.
  IF LS_DIM-LANGF IS NOT INITIAL.
    CONCATENATE LW_WHERE ' AND ' LS_DIM-LANGF ' = ''' SY-LANGU ''''
           INTO LW_WHERE RESPECTING BLANKS. .
  ENDIF.
  SELECT SINGLE (LS_DIM-DESCF)
    FROM (LS_DIM-CHECKTABLE)
    INTO ZVI_BM_SDPR_C-HDESC
   WHERE (LW_WHERE).

  GET CURSOR LINE LS_DYNPFIELDS-STEPL.
*  LS_DYNPFIELDS-STEPL       = TCTRL_ZVI_BM_SDPR_C-.
  LS_DYNPFIELDS-FIELDNAME = 'ZVI_BM_SDPR_C-LDESC'.
  LS_DYNPFIELDS-FIELDVALUE = ZVI_BM_SDPR_C-LDESC.
  APPEND LS_DYNPFIELDS TO LT_DYNPFIELDS.
  LS_DYNPFIELDS-FIELDNAME = 'ZVI_BM_SDPR_C-HDESC'.
  LS_DYNPFIELDS-FIELDVALUE = ZVI_BM_SDPR_C-HDESC.
  APPEND LS_DYNPFIELDS TO LT_DYNPFIELDS.

  CALL FUNCTION 'DYNP_VALUES_UPDATE'
    EXPORTING
      DYNAME     = SY-REPID
      DYNUMB     = SY-DYNNR
    TABLES
      DYNPFIELDS = LT_DYNPFIELDS
    EXCEPTIONS
      OTHERS     = 8.

  SELECT SINGLE DDTEXT
    FROM ZTB_BM_SDPR_DIM AS D INNER JOIN DD03L AS F
      ON D~TABNAME = F~TABNAME AND D~FIELDNAME = F~FIELDNAME
    LEFT JOIN DD04T AS T
      ON F~ROLLNAME = T~ROLLNAME AND T~DDLANGUAGE = SY-LANGU
    INTO ZVI_BM_SDPR_C-FDESC
   WHERE D~TABNAME = ZVI_BM_SDPR_C-RTABLE
     AND D~FIELDNAME = ZVI_BM_SDPR_C-RFIELD.
ENDFORM.

*&---------------------------------------------------------------------*
*& Form 0102_CONDITION_VALUE_SHLP
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
FORM 0102_CONDITION_VALUE_SHLP .
  DATA:
    LS_SHLP        TYPE  SHLP_DESCR,
    LW_SCRFIELD    TYPE DYNFNAM,
    LW_TABNAME     TYPE TABNAME,
    LW_FIELDNAME   TYPE FIELDNAME,
    LW_SHLPPARAM   TYPE SHLPFIELD,
    LW_LINE        TYPE I,
    LT_RETURN_VALS TYPE TABLE OF DDSHRETVAL.

  GET CURSOR FIELD LW_SCRFIELD LINE LW_LINE.
  LW_LINE = LW_LINE + TCTRL_ZVI_BM_SDPR_C-TOP_LINE - 1.

  READ TABLE EXTRACT INDEX LW_LINE.
  CHECK SY-SUBRC IS INITIAL.
  ZVI_BM_SDPR_C = EXTRACT.

  CALL FUNCTION 'F4IF_DETERMINE_SEARCHHELP'
    EXPORTING
      TABNAME           = ZVI_BM_SDPR_C-RTABLE
      FIELDNAME         = ZVI_BM_SDPR_C-RFIELD
*     SELECTION_SCREEN  = ' '
    IMPORTING
      SHLP              = LS_SHLP
    EXCEPTIONS
      FIELD_NOT_FOUND   = 1
      NO_HELP_FOR_FIELD = 2
      INCONSISTENT_HELP = 3
      OTHERS            = 4.
  CHECK SY-SUBRC IS INITIAL AND LS_SHLP-SHLPNAME IS NOT INITIAL.
  SPLIT LW_SCRFIELD AT '-' INTO LW_TABNAME LW_FIELDNAME.
  READ TABLE LS_SHLP-INTERFACE INTO DATA(LS_INTERFACE)
    WITH KEY VALFIELD = ZVI_BM_SDPR_C-RFIELD.
  IF SY-SUBRC IS INITIAL.
    LW_SHLPPARAM = LS_INTERFACE-SHLPFIELD.
  ELSE.
    READ TABLE LS_SHLP-INTERFACE INTO LS_INTERFACE
      WITH KEY F4FIELD = 'X'.
    IF SY-SUBRC IS INITIAL.
      LW_SHLPPARAM = LS_INTERFACE-SHLPFIELD.
    ENDIF.
  ENDIF.
  CALL FUNCTION 'F4IF_FIELD_VALUE_REQUEST'
    EXPORTING
      TABNAME           = LW_TABNAME
      FIELDNAME         = LW_FIELDNAME
      SEARCHHELP        = LS_SHLP-SHLPNAME
      SHLPPARAM         = LW_SHLPPARAM
      DYNPPROG          = SY-REPID
      DYNPNR            = SY-DYNNR
      DYNPROFIELD       = LW_SCRFIELD
    TABLES
      RETURN_TAB        = LT_RETURN_VALS
    EXCEPTIONS
      FIELD_NOT_FOUND   = 1
      NO_HELP_FOR_FIELD = 2
      INCONSISTENT_HELP = 3
      NO_VALUES_FOUND   = 4
      OTHERS            = 5.
  READ TABLE LT_RETURN_VALS INTO DATA(LS_RETVAL)
    WITH KEY RETFIELD = LW_SCRFIELD.
  IF SY-SUBRC IS INITIAL.
    ASSIGN (LW_SCRFIELD) TO FIELD-SYMBOL(<LF_FIELD>).
    <LF_FIELD> = LS_RETVAL-FIELDVAL.
  ENDIF.
  PERFORM 0102_CONDITION_VALUE_SET_DESC.
ENDFORM.

*      MODULE 0104_DETAIL_CHECK_AND_SET ON CHAIN-REQUEST..
*&---------------------------------------------------------------------*
*&      Module  0104_MATNR_MEINS_SET  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE 0104_DETAIL_CHECK_AND_SET INPUT.
  PERFORM 0104_DETAIL_CHECK_AND_SET.
ENDMODULE.

*&---------------------------------------------------------------------*
*& Form 0104_MATNR_MEINS_SET
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
FORM 0104_DETAIL_CHECK_AND_SET.
  DATA:
    LS_MARA       TYPE MARA,
    LS_DYNPFIELDS TYPE DYNPREAD,
    LT_DYNPFIELDS TYPE TABLE OF DYNPREAD,
    LR_MTPOS      TYPE RANGE OF T184-MTPOS,
    LS_MTPOS      LIKE LINE OF LR_MTPOS.

*  CALL FUNCTION 'ZFM_SCR_PAI'
*    EXPORTING
*      I_CPROG = SY-REPID.

  CHECK: ZVI_BM_SDPR_D-MATNR IS NOT INITIAL.
  SELECT SINGLE *
    FROM MARA
    INTO LS_MARA
   WHERE MATNR = ZVI_BM_SDPR_D-MATNR.
  CHECK SY-SUBRC IS INITIAL.
  IF ZVI_BM_SDPR_D-MEINS IS INITIAL.
    ZVI_BM_SDPR_D-MEINS = LS_MARA-MEINS.
    GET CURSOR LINE LS_DYNPFIELDS-STEPL.
    LS_DYNPFIELDS-FIELDNAME = 'ZVI_BM_SDPR_D-MEINS'.
    LS_DYNPFIELDS-FIELDVALUE = ZVI_BM_SDPR_D-MEINS.
    APPEND LS_DYNPFIELDS TO LT_DYNPFIELDS.

    CALL FUNCTION 'DYNP_VALUES_UPDATE'
      EXPORTING
        DYNAME     = SY-REPID
        DYNUMB     = SY-DYNNR
      TABLES
        DYNPFIELDS = LT_DYNPFIELDS
      EXCEPTIONS
        OTHERS     = 8.
  ELSE.
    SELECT SINGLE *
      FROM MARM
      INTO @DATA(LS_MARM)
   WHERE MATNR = @ZVI_BM_SDPR_D-MATNR
     AND MEINH = @ZVI_BM_SDPR_D-MEINS.
    IF SY-SUBRC IS NOT INITIAL.
      MESSAGE E898(ME) WITH ZVI_BM_SDPR_D-MEINS.
    ENDIF.
  ENDIF.

  LS_MTPOS-SIGN     = 'I'.
  LS_MTPOS-OPTION   = 'EQ'.
  LS_MTPOS-LOW      = LS_MARA-MTPOS_MARA.
  APPEND LS_MTPOS TO LR_MTPOS.
  SELECT T184~AUART, TVAKT~BEZEI AS AUARTT, T184~PSTYV, PSTY1, PSTY2, PSTY3,
         PSTY4, PSTY5, PSTY6, PSTY7, PSTY8, PSTY9, PSTY10, PSTY11
    INTO @DATA(LS_T184)
    FROM T184 LEFT OUTER JOIN TVAKT
      ON T184~AUART = TVAKT~AUART AND TVAKT~SPRAS = @SY-LANGU
   WHERE T184~AUART = @ZVI_BM_SDPR_D-AUART
*     AND T184~PSTYV LIKE 'Z%'
     AND MTPOS      IN @LR_MTPOS
     AND ( PSTYV = @ZVI_BM_SDPR_D-PSTYV
        OR PSTY1 = @ZVI_BM_SDPR_D-PSTYV
        OR PSTY2 = @ZVI_BM_SDPR_D-PSTYV
        OR PSTY3 = @ZVI_BM_SDPR_D-PSTYV
        OR PSTY4 = @ZVI_BM_SDPR_D-PSTYV
        OR PSTY5 = @ZVI_BM_SDPR_D-PSTYV
        OR PSTY6 = @ZVI_BM_SDPR_D-PSTYV
        OR PSTY7 = @ZVI_BM_SDPR_D-PSTYV
        OR PSTY8 = @ZVI_BM_SDPR_D-PSTYV
        OR PSTY9 = @ZVI_BM_SDPR_D-PSTYV
        OR PSTY10 = @ZVI_BM_SDPR_D-PSTYV
        OR PSTY11 = @ZVI_BM_SDPR_D-PSTYV
          ).
  ENDSELECT.
  IF SY-SUBRC IS NOT INITIAL.
    MESSAGE E320(V1) WITH ZVI_BM_SDPR_D-PSTYV LS_MARA-MTPOS_MARA.
  ENDIF.
ENDFORM.

*&---------------------------------------------------------------------*
*& Module 0104_TAB_PBO OUTPUT
*&---------------------------------------------------------------------*
*&
*&---------------------------------------------------------------------*
MODULE 0104_TAB_PBO OUTPUT.
  CALL FUNCTION 'ZFM_SCR_PBO'
    EXPORTING
      I_CPROG = SY-REPID.
ENDMODULE.
