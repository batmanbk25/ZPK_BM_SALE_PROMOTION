FUNCTION ZFM_SALE_PROMOTION_CHECK.
*"----------------------------------------------------------------------
*"*"Local Interface:
*"  IMPORTING
*"     REFERENCE(IS_TVAK) TYPE  TVAK
*"     REFERENCE(IS_VBAK) TYPE  VBAK
*"     REFERENCE(IS_VBKD) TYPE  VBKD
*"  CHANGING
*"     REFERENCE(CT_VBAP) TYPE  TT_VBAPVB
*"     REFERENCE(CT_KOMV) TYPE  KOMV_TAB
*"----------------------------------------------------------------------
  DATA:
    LS_SDPR     TYPE ZST_SDPR,
    LS_SDPR_DET TYPE ZST_BM_SDPR_D,
    LS_VBAP     TYPE VBAPVB,
    LW_FIT      TYPE XMARK,
    LT_VBAP_GEN TYPE TT_VBAPVB,
    LS_LAYOUT   TYPE LVC_S_LAYO,
    LS_VARIANT  TYPE DISVARIANT.

  CHECK SY-TCODE CP 'VA*'.
  CHECK SY-DYNNR NP '01*'.
  CLEAR: GT_SDPR_D_ALV.
  VBAK = IS_VBAK.
  VBKD = IS_VBKD.
  IF GT_SDPR IS INITIAL.
    PERFORM 0000_GET_SALE_PROGRAMS.
  ENDIF.
*  BREAK-POINT.
  LOOP AT GT_SDPR INTO LS_SDPR
    WHERE AUART = VBAK-AUART
      AND BUKRS = VBAK-VKORG.
    LOOP AT CT_VBAP INTO LS_VBAP
      WHERE LSTANR IS INITIAL
        AND UPDKZ <> 'D'.
      LOOP AT CT_VBAP TRANSPORTING NO FIELDS
*        WHERE UEPOS = LS_VBAP-POSNR
        WHERE ADACN = LS_VBAP-POSNR
          AND UPDKZ  <> 'D'.
        EXIT.
      ENDLOOP.
      CHECK SY-SUBRC IS NOT INITIAL.
*     Check condition
      PERFORM CONDITION_CHECK
        USING IS_VBAK
              IS_VBKD
              LS_VBAP
              CT_KOMV
              LS_SDPR
        CHANGING LW_FIT.
      CHECK LW_FIT = GC_XMARK.

      PERFORM SO_ITEM_ADD_OPT
        USING LS_VBAP
              LS_SDPR
        CHANGING GT_SDPR_D_ALV.
    ENDLOOP.
  ENDLOOP.

  IF GT_SDPR_D_ALV IS NOT INITIAL.
    LS_LAYOUT-CWIDTH_OPT = GC_XMARK.
    LS_LAYOUT-NO_ROWMARK = GC_XMARK.
    LS_VARIANT-REPORT = SY-REPID.
    LS_VARIANT-HANDLE = SPACE.

    CALL FUNCTION 'ZFM_ALV_DISPLAY'
      EXPORTING
        I_GRID_TITLE             = TEXT-001
        I_STRUCTURE_NAME         = 'ZST_BM_SDPR_D_ALV'
        I_CALLBACK_PROGRAM       = SY-REPID
        I_CALLBACK_PF_STATUS_SET = 'SALE_PROMO_ALV_PF_STATUS_SET'
        I_CALLBACK_USER_COMMAND  = 'SALE_PROMO_ALV_USER_COMMAND'
        IS_LAYOUT_LVC            = LS_LAYOUT
        I_DEFAULT                = 'X'
        I_SAVE                   = 'A'
*       IS_VARIANT               =
        I_SCREEN_START_COLUMN    = 5
        I_SCREEN_START_LINE      = 5
        I_SCREEN_END_COLUMN      = 125
        I_SCREEN_END_LINE        = 20
      TABLES
        T_OUTTAB                 = GT_SDPR_D_ALV.
*   Generate SO line
    PERFORM SO_ITEM_GENERATE
      USING IS_VBAK
            IS_VBKD
*            LS_VBAP
*            LS_SDPR
            GT_SDPR_D_ALV
      CHANGING LT_VBAP_GEN.
  ENDIF.
ENDFUNCTION.

FORM SALE_PROMO_ALV_PF_STATUS_SET
    USING RT_EXTAB TYPE KKBLO_T_EXTAB.
  DELETE RT_EXTAB WHERE FCODE EQ '&ALL' OR FCODE EQ '&SAL'.
  SET PF-STATUS 'STDPOPUP_FULLSCREEN'.

ENDFORM.

FORM SALE_PROMO_ALV_USER_COMMAND
    USING R_UCOMM     TYPE SY-UCOMM
          RS_SELFIELD TYPE SLIS_SELFIELD.

  DATA: LO_GRID TYPE REF TO CL_GUI_ALV_GRID.
  IF LO_GRID IS INITIAL.
    CALL FUNCTION 'GET_GLOBALS_FROM_SLVC_FULLSCR'
      IMPORTING
        E_GRID = LO_GRID.
  ENDIF.
  IF NOT LO_GRID IS INITIAL.
    CALL METHOD LO_GRID->CHECK_CHANGED_DATA .
  ENDIF.

  CASE R_UCOMM.
    WHEN '&ONT'.
    WHEN '&ALL1'.
      CALL FUNCTION 'ZFM_ALV_ROWS_SELECT'
        CHANGING
          GO_ALV  = LO_GRID
          GT_DATA = GT_SDPR_D_ALV.
      CALL METHOD LO_GRID->REFRESH_TABLE_DISPLAY.

    WHEN '&SAL1'.
      CALL FUNCTION 'ZFM_ALV_ROWS_SELECT'
        EXPORTING
          I_SEL_NONE = 'X'
        CHANGING
          GO_ALV     = LO_GRID
          GT_DATA    = GT_SDPR_D_ALV.
      CALL METHOD LO_GRID->REFRESH_TABLE_DISPLAY.
    WHEN OTHERS.
  ENDCASE.
ENDFORM.
